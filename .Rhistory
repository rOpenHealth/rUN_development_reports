"14: Population" = "e6xu-b22v")
endpoints[[match.arg(table_name, names(endpoints))]]
}
#' Returns the matched api_type for the argument
#'
#' Allows for partial matching and laziness of typing!
#'
#' @param type Character one of c("Quartile", "Ranked Country", "Region", "Unranked Country",
#' "World"). Partial matches allowed.
#' @return Character
.api_types <- function(type = NULL){
types <- c("Quartile", "Ranked Country", "Region", "Unranked Country", "World")
if(!is.null(type)){
type <- match.arg(type, types)
}
type
}
paste0(api_url, .api_endpoints(table), ".json")
#read_socrata()
table_url <- paste0(api_url, .api_endpoints(table), ".json")
read_socrata(table_url)
sapply(api_args, function(x) !is.null(x))
api_args <- list(name = name, type = type, select = select, where = where, order = order)
name = NULL
type = NULL
select = NULL
where = NULL
order = NULL
sapply(api_args, function(x) !is.null(x))
api_args <- list(name = name, type = type, select = select, where = where, order = order)
sapply(api_args, function(x) !is.null(x))
api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
paste(api_args)
paste(api_args, sep = "&")
name = "Germany"
order = "name"
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = name, type = type, select = select, where = where, order = order)
api_args <- paste(api_args[sapply(api_args, function(x) !is.null(x))], sep = "&")
api_args
names(api_args)
api_args <- list(name = name, type = type, select = select, where = where, order = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args
names(api_args)
paste(api_args)
paste(names(api_args),api_args)
paste(names(api_args),api_args, sep = "=", collapse = "&")
api_args <- list(name = name, type = type, select = select, where = where, order = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
api_args
api_args
if(list()) 1
if(length(list()) 1
if(length(list())) 1
paste(api_url, api_args, collapse = "?")
paste(table_url, api_args, sep = "?")
q <- paste(table_url, api_args, sep = "?")
read_socrata(q)
q
.fetch_undp_table <- function(table = "1: Human Development Index and its Components",
name = "Germany", type = NULL, select = NULL, where = NULL, order = "name"){
api_url <- "http://data.undp.org/resource/"
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = name, type = type, select = select, where = where, order = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
if(length(api_args)){
q <- paste(table_url, api_args, sep = "?")
} else q <- table_url
q
}
.fetch_undp_table <- function(table = "1: Human Development Index and its Components",
name = NULL, type = NULL, select = NULL, where = NULL, order = NULL){
api_url <- "http://data.undp.org/resource/"
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = name, type = type, select = select, where = where, order = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
if(length(api_args)){
q <- paste(table_url, api_args, sep = "?")
} else q <- table_url
q
}
.fetch_undp_table()
name = NULL
order = NULL
api_url <- "http://data.undp.org/resource/"
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = name, type = type, select = select, where = where, order = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
api_args
length(api_args)
nchar(api_args)
.fetch_undp_table <- function(table = "1: Human Development Index and its Components",
name = NULL, type = NULL, select = NULL, where = NULL, order = NULL){
api_url <- "http://data.undp.org/resource/"
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = name, type = type, select = select, where = where, order = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
if(nchar(api_args)){
q <- paste(table_url, api_args, sep = "?")
} else q <- table_url
q
}
.fetch_undp_table()
.fetch_undp_table(name = "UK")
.fetch_undp_table(name = "UK", type = )
select = c("hello", "plums")
paste(select, sep = ",")
paste(select, collapse = ",")
.fetch_undp_table <- function(table = "1: Human Development Index and its Components",
name = NULL, type = NULL, select = NULL, where = NULL, order = NULL){
api_url <- "http://data.undp.org/resource/"
type <- .api_types(type)
select <- paste(select, collapse = ",")
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = name, type = type, select = select, where = where, order = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
if(nchar(api_args)){
q <- paste(table_url, api_args, sep = "?")
} else q <- table_url
q
}
.fetch_undp_table()
api_url <- "http://data.undp.org/resource/"
type <- .api_types(type)
select <- paste(select, collapse = ",")
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = name, type = type, select = select, where = where, order = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x) | nchar(x))]
select = NULL
api_url <- "http://data.undp.org/resource/"
type <- .api_types(type)
if(!is.null(select)) select <- paste(select, collapse = ",")
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = name, type = type, select = select, where = where, order = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
api_args
.fetch_undp_table <- function(table = "1: Human Development Index and its Components",
name = NULL, type = NULL, select = NULL, where = NULL, order = NULL){
api_url <- "http://data.undp.org/resource/"
type <- .api_types(type)
if(!is.null(select)) select <- paste(select, collapse = ",")
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = name, type = type, select = select, where = where, order = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
if(nchar(api_args)){
q <- paste(table_url, api_args, sep = "?")
} else q <- table_url
q
}
.fetch_undp_table()
.fetch_undp_table <- function(table = "1: Human Development Index and its Components",
name = NULL, type = NULL, select = NULL, where = NULL, order = NULL){
api_url <- "http://data.undp.org/resource/"
type <- .api_types(type)
if(!is.null(select)) select <- paste(select, collapse = ",")
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = name, type = type, select = select, where = where, order = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
if(nchar(api_args)){
q <- paste(table_url, api_args, sep = "?")
} else q <- table_url
read_socrata(q)
}
a <- .fetch_undp_table()
s <- "-name"
s
grep("^-(.)+", s)
?grep
regexec("^-(.)+", s)
gregexec("^-(.)+", s)
gregexpr("^-(.)+", s)
regexpr("^-(.)+", s)
regexec("^-(.)+", s)
grep("^-(.)+", s)
grep("^-(.)+", s, value = TRUE)
grep("^-(.)_+", s, value = TRUE)
grep("^-(.)+", s, value = TRUE)
grep("^-(.)+_", s, value = TRUE)
grep("^-(.)+_", s, value = F)
length(grep("^-(.)+_", s, value = F))
length(grep("^-(.)+", s, value = F))
length(grep("^-(.)+", s))
?build_url
q
parse_url(q)
substr(s, 2)
substr(s, 2, nchar(s))
paste(substr(s, 2, nchar(s)), "asc", sep = "%20")
.parse_order <- function(s){
if(length(grep("^-(.)+", s))){
paste(substr(s, 2, nchar(s)), "desc", sep = "%20")
} else  paste(s, "asc", sep = "%20")
}
.parse_order("hello")
.parse_order("-hello")
install.packages("Rsocrata")
install.packages("RSocrata")
check(".")
check(".")
.parse_order <- function(s){
if(is.null(s)) return(s)
if(length(grep("^-(.)+", s))){
paste(substr(s, 2, nchar(s)), "desc", sep = "%20")
} else  paste(s, "asc", sep = "%20")
}
.parse_order(NULL)
.parse_order("hello")
.parse_order("-hello")
require(mvnorm)
require(mvtnorm)
mu <- c(3,4)
sig <- matrix(c(0.026,-0.011, -0.011, 0.021),ncol=2)
sig
rmvnorm(100, mu, sig)
a=rmvnorm(100, mu, sig)
plot(a[1])
plot(a[,1])
plot(a[,1], a[,2])
sig
a=rmvnorm(10000, mu, sig)
plot(a[,1], a[,2])
fetch_undp_table <- function(table = "1: Human Development Index and its Components",
country = NULL, type = NULL, select = NULL, where = NULL, order = NULL,
query_string_only = FALSE, ...){
extra_args <- list(...)
api_url <- "http://data.undp.org/resource/"
type <- .api_types(type)
order <- .parse_order(order)
if(!is.null(select)) select <- paste(select, collapse = ",")
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = country, type = type, "$select" = select, "$where" = where, "$order" = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- c(api_args, extra_args)
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
if(nchar(api_args)){
q <- paste(table_url, api_args, sep = "?")
} else q <- table_url
if(query_string_only){
q
} else read.socrata(q)
}
fetch_undp_table(query_string_only=T, hello = "plums")
fetch_undp_table <- function(table = "1: Human Development Index and its Components",
country = NULL, type = NULL,
select = NULL, where = NULL, order = NULL, group = NULL, limit = NULL,
offset = NULL, q = NULL, query_string_only = FALSE, ...){
extra_args <- list(...)
api_url <- "http://data.undp.org/resource/"
type <- .api_types(type)
order <- .parse_order(order)
if(!is.null(select)) select <- paste(select, collapse = ",")
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = country, type = type, "$select" = select, "$where" = where, "$order" = order)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- c(api_args, extra_args)
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
if(nchar(api_args)){
q <- paste(table_url, api_args, sep = "?")
} else q <- table_url
if(query_string_only){
q
} else read.socrata(q)
}
fetch_undp_table <- function(table = "1: Human Development Index and its Components",
country = NULL, type = NULL,
select = NULL, where = NULL, order = NULL, group = NULL, limit = NULL,
offset = NULL, q = NULL, query_string_only = FALSE, ...){
extra_args <- list(...)
api_url <- "http://data.undp.org/resource/"
type <- .api_types(type)
order <- .parse_order(order)
if(!is.null(select)) select <- paste(select, collapse = ",")
table_url <- paste0(api_url, .api_endpoints(table), ".json")
api_args <- list(name = country, type = type,
"$select" = select, "$where" = where, "$order" = order, "$group" = group,
"$limit" = limit, "$offset" = offset, "$q" = q)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- c(api_args, extra_args)
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
if(nchar(api_args)){
query <- paste(table_url, api_args, sep = "?")
} else query <- table_url
if(query_string_only){
query
} else read.socrata(query)
}
fetch_undp_table <- function(table = "1: Human Development Index and its Components", x4code = NULL
country = NULL, type = NULL,
select = NULL, where = NULL, order = NULL, group = NULL, limit = NULL,
offset = NULL, q = NULL, query_string_only = FALSE, ...){
extra_args <- list(...)
api_url <- "http://data.undp.org/resource/"
type <- .api_types(type)
order <- .parse_order(order)
if(!is.null(select)) select <- paste(select, collapse = ",")
if(is.null(x4code)){
table_url <- paste0(api_url, .api_endpoints(table), ".json")
} else table_url <- paste0(api_url, x4code, ".json")
api_args <- list(name = country, type = type,
"$select" = select, "$where" = where, "$order" = order, "$group" = group,
"$limit" = limit, "$offset" = offset, "$q" = q)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- c(api_args, extra_args)
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
if(nchar(api_args)){
query <- paste(table_url, api_args, sep = "?")
} else query <- table_url
if(query_string_only){
query
} else read.socrata(query)
}
fetch_undp_table <- function(table = "1: Human Development Index and its Components", x4code = NULL
country = NULL, type = NULL,
select = NULL, where = NULL, order = NULL, group = NULL, limit = NULL,
offset = NULL, q = NULL, query_string_only = FALSE, ...){
extra_args <- list(...)
api_url <- "http://data.undp.org/resource/"
type <- .api_types(type)
order <- .parse_order(order)
if(!is.null(select)) select <- paste(select, collapse = ",")
if(is.null(x4code)){
table_url <- paste0(api_url, .api_endpoints(table), ".json")
} else table_url <- paste0(api_url, x4code, ".json")
api_args <- list(name = country, type = type,
"$select" = select, "$where" = where, "$order" = order, "$group" = group,
"$limit" = limit, "$offset" = offset, "$q" = q)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- c(api_args, extra_args)
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
if(nchar(api_args)){
query <- paste(table_url, api_args, sep = "?")
} else query <- table_url
if(query_string_only){
query
} else read.socrata(query)
}
fetch_undp_table <- function(table = "1: Human Development Index and its Components", x4code = NULL,
country = NULL, type = NULL,
select = NULL, where = NULL, order = NULL, group = NULL, limit = NULL,
offset = NULL, q = NULL, query_string_only = FALSE, ...){
extra_args <- list(...)
api_url <- "http://data.undp.org/resource/"
type <- .api_types(type)
order <- .parse_order(order)
if(!is.null(select)) select <- paste(select, collapse = ",")
if(is.null(x4code)){
table_url <- paste0(api_url, .api_endpoints(table), ".json")
} else table_url <- paste0(api_url, x4code, ".json")
api_args <- list(name = country, type = type,
"$select" = select, "$where" = where, "$order" = order, "$group" = group,
"$limit" = limit, "$offset" = offset, "$q" = q)
api_args <- api_args[sapply(api_args, function(x) !is.null(x))]
api_args <- c(api_args, extra_args)
api_args <- paste(names(api_args),api_args, sep = "=", collapse = "&")
if(nchar(api_args)){
query <- paste(table_url, api_args, sep = "?")
} else query <- table_url
if(query_string_only){
query
} else read.socrata(query)
}
fetch_undp_table(x4code = "wxub-qc5k", name = "Germany")
library(RSocrata)
fetch_undp_table(x4code = "wxub-qc5k", name = "Germany")
fetch_undp_table(x4code = "wxub-qc5k", type = "Q")
fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank") # partial matching
fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50") # partial matching
fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50", query_string_only=T)
s
grep("^-", s)
a <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50", query_string_only=T)
a
url=a
validateUrl(url)
validUrl <- validateUrl(url) # check url syntax, allow human-readable Socrata url
parse_url(validUrl)
parsedUrl <- parse_url(validUrl)
mimeType <- guess_media(parsedUrl$path)
mimeType
response <- getResponse(validUrl)
response
str9response
str(response)
page <- getContentAsDataFrame(response)
page
View(page)
result <- page
dataTypes <- getSodaTypes(response)
dataTypes
nrow(page)
query <- paste(validUrl, if(is.null(parsedUrl$query)) {'?'} else {"&"}, '$offset=', nrow(result), sep='')
query
uery <- paste(validUrl, if(is.null(parsedUrl$query)) {'?'} else {"&"}, '$offset=', nrow(result), sep='')
response <- getResponse(query)
page <- getContentAsDataFrame(response)
result <- rbind(result, page) # accumulate
query <- paste(validUrl, if(is.null(parsedUrl$query)) {'?'} else {"&"}, '$offset=', nrow(result), sep='')
response <- getResponse(query)
page <- getContentAsDataFrame(response)
result <- rbind(result, page) # accumulate
response <- getResponse(validUrl)
response[[1]]
response[[2]]
response[[3]]
response[[4]]
response[[5]]
response[[6]]
names(response)
response[[7]]
response[[8]]
mimeType <- response$header$'content-type'
mimeType
sep <- regexpr(';', mimeType)[1]
sep
mimeType <- substr(mimeType, 0, sep[1] - 1)
mimeType
content(response)
?content
sapply(content(response), unlist)
t(sapply(content(response), unlist))
unlist(sapply(content(response), unlist))
sapply(content(response), unlist)
aa=sapply(content(response), unlist)
aa[1]
data.frame(aa)
do.call(rbind, aa)
sapply(aa, length)
aa[[1]]
aa[[2]]
names(aa[[2]])
names(aa[[1]])
con <- content(response)
con
names(con)
names(con[[1]])
names(con[[2]])
con[[1]]
sapply(con, length)
all(sapply(con, length) == length(con[[1]]))
any(sapply(con, length) == length(con[[1]]))
all(sapply(con, length) == length(con[[1]]))
sapply(con, length)
which(sapply(con, length) = max(sapply(con, length)))
which(sapply(con, length) == max(sapply(con, length)))
which(sapply(con, length) == max(sapply(con, length)))[1]
con[[which(sapply(con, length) == max(sapply(con, length)))[1]]]
max_length <- con[[which(sapply(con, length) == max(sapply(con, length)))[1]]]
max_length
class(con)
names(con[[which(sapply(con, length) == max(sapply(con, length)))[1]]])
all_cols <- names(con[[which(sapply(con, length) == max(sapply(con, length)))[1]]])
all_cols
x = con[[1]]
x
all_cols[!all_cols in names(x)]
all_cols[!all_cols %in% names(x)]
lapply(all_cols[!all_cols %in% names(x)], function(x) NA)
sapply(all_cols[!all_cols %in% names(x)], function(x) NA)
sapply(all_cols[!all_cols %in% names(x)], function(x) NA, simplify=F)
lapply(all_cols[!all_cols %in% names(x)], function(x) NA, simplify = F)
sapply(all_cols[!all_cols %in% names(x)], function(x) NA, simplify=F)
x
r <- c(x, sapply(all_cols[!all_cols %in% names(x)], function(x) NA, simplify=F))
r
r[all_cols]
all_cols
data.frame(t(sapply(r[all_cols], unlist)), stringsAsFactors=FALSE)
content_to_df <- function(con){
lengths <- sapply(con, length)
if(all(lengths == length(con[[1]]))){
data.frame(t(sapply(con, unlist)), stringsAsFactors=FALSE)
} else {
all_cols <- names(con[[which(sapply(con, length) == max(sapply(con, length)))[1]]])
con <- lapply(con, function(x){
r <- c(x, sapply(all_cols[!all_cols %in% names(x)], function(x) NA, simplify=F))
r[all_cols]
})
data.frame(t(sapply(con, unlist)), stringsAsFactors=FALSE)
}
}
content_to_df <- function(con){
lengths <- sapply(con, length)
if(all(lengths == length(con[[1]]))){
data.frame(t(sapply(con, unlist)), stringsAsFactors = FALSE)
} else {
all_cols <- names(con[[which(sapply(con, length) == max(sapply(con, length)))[1]]])
con <- lapply(con, function(x){
r <- c(x, sapply(all_cols[!all_cols %in% names(x)], function(xx) NA, simplify = FALSE))
r[all_cols]
})
data.frame(t(sapply(con, unlist)), stringsAsFactors = FALSE)
}
}
content_to_df(con)
url
read.socrata(url)
source('~/rOpenHealth/rUNdp/R/socrata.R', echo=TRUE)
read.socrata(url)
source('~/rOpenHealth/rUNdp/R/socrata.R', echo=TRUE)
read.socrata(url)
?content
