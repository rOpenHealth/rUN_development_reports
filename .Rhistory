uery <- paste(validUrl, if(is.null(parsedUrl$query)) {'?'} else {"&"}, '$offset=', nrow(result), sep='')
response <- getResponse(query)
page <- getContentAsDataFrame(response)
result <- rbind(result, page) # accumulate
query <- paste(validUrl, if(is.null(parsedUrl$query)) {'?'} else {"&"}, '$offset=', nrow(result), sep='')
response <- getResponse(query)
page <- getContentAsDataFrame(response)
result <- rbind(result, page) # accumulate
response <- getResponse(validUrl)
response[[1]]
response[[2]]
response[[3]]
response[[4]]
response[[5]]
response[[6]]
names(response)
response[[7]]
response[[8]]
mimeType <- response$header$'content-type'
mimeType
sep <- regexpr(';', mimeType)[1]
sep
mimeType <- substr(mimeType, 0, sep[1] - 1)
mimeType
content(response)
?content
sapply(content(response), unlist)
t(sapply(content(response), unlist))
unlist(sapply(content(response), unlist))
sapply(content(response), unlist)
aa=sapply(content(response), unlist)
aa[1]
data.frame(aa)
do.call(rbind, aa)
sapply(aa, length)
aa[[1]]
aa[[2]]
names(aa[[2]])
names(aa[[1]])
con <- content(response)
con
names(con)
names(con[[1]])
names(con[[2]])
con[[1]]
sapply(con, length)
all(sapply(con, length) == length(con[[1]]))
any(sapply(con, length) == length(con[[1]]))
all(sapply(con, length) == length(con[[1]]))
sapply(con, length)
which(sapply(con, length) = max(sapply(con, length)))
which(sapply(con, length) == max(sapply(con, length)))
which(sapply(con, length) == max(sapply(con, length)))[1]
con[[which(sapply(con, length) == max(sapply(con, length)))[1]]]
max_length <- con[[which(sapply(con, length) == max(sapply(con, length)))[1]]]
max_length
class(con)
names(con[[which(sapply(con, length) == max(sapply(con, length)))[1]]])
all_cols <- names(con[[which(sapply(con, length) == max(sapply(con, length)))[1]]])
all_cols
x = con[[1]]
x
all_cols[!all_cols in names(x)]
all_cols[!all_cols %in% names(x)]
lapply(all_cols[!all_cols %in% names(x)], function(x) NA)
sapply(all_cols[!all_cols %in% names(x)], function(x) NA)
sapply(all_cols[!all_cols %in% names(x)], function(x) NA, simplify=F)
lapply(all_cols[!all_cols %in% names(x)], function(x) NA, simplify = F)
sapply(all_cols[!all_cols %in% names(x)], function(x) NA, simplify=F)
x
r <- c(x, sapply(all_cols[!all_cols %in% names(x)], function(x) NA, simplify=F))
r
r[all_cols]
all_cols
data.frame(t(sapply(r[all_cols], unlist)), stringsAsFactors=FALSE)
content_to_df <- function(con){
lengths <- sapply(con, length)
if(all(lengths == length(con[[1]]))){
data.frame(t(sapply(con, unlist)), stringsAsFactors=FALSE)
} else {
all_cols <- names(con[[which(sapply(con, length) == max(sapply(con, length)))[1]]])
con <- lapply(con, function(x){
r <- c(x, sapply(all_cols[!all_cols %in% names(x)], function(x) NA, simplify=F))
r[all_cols]
})
data.frame(t(sapply(con, unlist)), stringsAsFactors=FALSE)
}
}
content_to_df <- function(con){
lengths <- sapply(con, length)
if(all(lengths == length(con[[1]]))){
data.frame(t(sapply(con, unlist)), stringsAsFactors = FALSE)
} else {
all_cols <- names(con[[which(sapply(con, length) == max(sapply(con, length)))[1]]])
con <- lapply(con, function(x){
r <- c(x, sapply(all_cols[!all_cols %in% names(x)], function(xx) NA, simplify = FALSE))
r[all_cols]
})
data.frame(t(sapply(con, unlist)), stringsAsFactors = FALSE)
}
}
content_to_df(con)
url
read.socrata(url)
source('~/rOpenHealth/rUNdp/R/socrata.R', echo=TRUE)
read.socrata(url)
source('~/rOpenHealth/rUNdp/R/socrata.R', echo=TRUE)
read.socrata(url)
?content
source('~/rOpenHealth/rUNdp/R/rUNdp.R', echo=TRUE)
require(devtools)
load_all()
load_all()
fetch_undp_table(x4code = "wxub-qc5k", name = "Germany")
fetch_undp_table(x4code = "wxub-qc5k", type = "Quar") # partial matching
fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50") # partial matching
a <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50", query_string_only=T)
a <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50")
a
require(testthat)
expect_identical(class(data.frame()), "data.frame")
expect_identical(class(data.frame()), "data.framea")
fetch_undp_table(x4code = "wxub-qc5k", table = "4: Gender")
fetch_undp_table(table = "4: Gender")
expect_equal(class(data.frame()), "data.framea")
expect_equal(class(data.frame()), "data.frame")
expect_that(class(fetch_undp_table(table = "4: Gender")), equals("data.frame"))
expect_that(class(fetch_undp_table(table = "6")), equals("data.frame"))
fetch_undp_table(table = "No matching table")
expect_that(fetch_undp_table(table = "No matching table"), throws_error())
expect_that(class(fetch_undp_table(table = "6", type = "Qart")), equals("data.frame"))
expect_that(class(fetch_undp_table(table = "6", type = "Quart")), equals("data.frame"))
expect_that(fetch_undp_table(table = "1:", type = "Fifedom"), throws_error())
expect_that(class(fetch_undp_table(table = "No matching table", x4code = "wxub-qc5k")), equals("data.frame"))
fetch_undp_table(x4code = "wxub-qc5k", name = "Germany")
nrow(fetch_undp_table(x4code = "wxub-qc5k", name = "Germany"))
expect_that(nrow(fetch_undp_table(x4code = "wxub-qc5k", name = "Germany")), equals(1))
expect_that(nrow(fetch_undp_table(x4code = "wxub-qc5k", abbreviation = "AFG")), equals(1))
fetch_undp_table(x4code = "wxub-qc5k", abbreviation = "AFG")
expect_that(nrow(fetch_undp_table(x4code = "wxub-qc5k", country = "Germany")), equals(1))
expect_that(nrow(fetch_undp_table(x4code = "wxub-qc5k", country = "Hobbiton")), equals(1))
fetch_undp_table(x4code = "wxub-qc5k", name = "Hobbiton")
nrow(fetch_undp_table(x4code = "wxub-qc5k", name = "Hobbiton"))
nrow(fetch_undp_table(x4code = "wxub-qc5k9", name = "Hobbiton"))
fetch_undp_table(x4code = "wxub-qc5k9", name = "Hobbiton")
fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50")
where_test <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50")
fetch_undp_table(x4code = "wxub-qc5k", select = c("name", "abbreviation", "_2012_hdi_value"))
select_test <- fetch_undp_table(x4code = "wxub-qc5k", select = c("name", "abbreviation", "_2012_hdi_value"))
order_asc <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50",
select = c("name", "abbreviation", "_2012_hdi_value"),
order = "name")
order_desc <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50",
select = c("name", "abbreviation", "_2012_hdi_value"),
order = "-name")
View(order_asc)
View(order_desc)
View(order_asc)
limit_test <- fetch_undp_table(x4code = "wxub-qc5k", limit = 12)
limit_test <- fetch_undp_table(x4code = "wxub-qc5k")
limit_test <- fetch_undp_table(x4code = "wxub-qc5k", limit = 10)
limit_test <- fetch_undp_table(x4code = "wxub-qc5k", limit = "10")
limit_test <- fetch_undp_table(x4code = "wxub-qc5k", limit = "10", query_string_only=T)
limit_test
select_test <- fetch_undp_table(x4code = "wxub-qc5k",
select = c("name", "abbreviation", "_2012_hdi_value"))
where_test <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50")
order_asc <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50",
select = c("name", "abbreviation", "_2012_hdi_value"),
order = "name")
order_desc <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50",
select = c("name", "abbreviation", "_2012_hdi_value"),
order = "-name")
limit_test <- fetch_undp_table(x4code = "wxub-qc5k", offset = 2)
limit_test <- fetch_undp_table(x4code = "wxub-qc5k", offset = 1)
limit_test <- fetch_undp_table(x4code = "wxub-qc5k", offset = 0)
limit_test <- fetch_undp_table(x4code = "wxub-qc5k", offset = NULL)
limit_test <- fetch_undp_table(x4code = "wxub-qc5k", limit = 10)
q_test  <- fetch_undp_table(x4code = "wxub-qc5k", q = "Congo")
View(q_test)
limit_test <- fetch_undp_table(x4code = "wxub-qc5k", limit = 10)
limit_test <- fetch_undp_table(x4code = "wxub-qc5k", limit = 10, query_string_only=TRUE)
url <- limit_test
url
read.socrate(url)
read.socrata(url)
validUrl <- validateUrl(url) # check url syntax, allow human-readable Socrata url
parsedUrl <- parse_url(validUrl)
require(httr)
require(jsonlite)
parsedUrl <- parse_url(validUrl)
mimeType <- guess_media(parsedUrl$path)
if(!(mimeType %in% c('text/csv','application/json')))
stop("Error in read.socrata: ", mimeType, " not a supported data format.")
response <- getResponse(validUrl)
page <- getContentAsDataFrame(response)
page
result <- page
dataTypes <- getSodaTypes(response)
while (nrow(page) > 0) { # more to come maybe?
query <- paste(validUrl, if(is.null(parsedUrl$query)) {'?'} else {"&"}, '$offset=', nrow(result), sep='')
response <- getResponse(query)
page <- getContentAsDataFrame(response)
result <- rbind(result, page) # accumulate
}
View(page)
page <- getContentAsDataFrame(response)
result <- page
nrow(page) > 0
query <- paste(validUrl, if(is.null(parsedUrl$query)) {'?'} else {"&"}, '$offset=', nrow(result), sep='')
query
response <- getResponse(query)
page <- getContentAsDataFrame(response)
page
result
result <- rbind(result, page) # accumulate
names(result)
names(page)
names(page) == names(result)
View(page)
View(where_test)
query
length(names(page))
length(names(result))
names(page) == names(result)[names(page)]
names(page) == names(result[names(page)])
source('~/.active-rstudio-document', echo=TRUE)
select_test <- fetch_undp_table(x4code = "wxub-qc5k",
select = c("name", "abbreviation", "_2012_hdi_value"))
where_test <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50")
order_asc <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50",
select = c("name", "abbreviation", "_2012_hdi_value"),
order = "name")
order_desc <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50",
select = c("name", "abbreviation", "_2012_hdi_value"),
order = "-name")
q_test  <- fetch_undp_table(x4code = "wxub-qc5k", q = "Congo")
select_test <- fetch_undp_table(x4code = "wxub-qc5k",
select = c("name", "abbreviation", "_2012_hdi_value"))
source('~/rOpenHealth/rUNdp/R/rUNdp.R', echo=TRUE)
select_test <- fetch_undp_table(x4code = "wxub-qc5k",
select = c("name", "abbreviation", "_2012_hdi_value"))
where_test <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50")
order_asc <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50",
select = c("name", "abbreviation", "_2012_hdi_value"),
order = "name")
order_desc <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50",
select = c("name", "abbreviation", "_2012_hdi_value"),
order = "-name")
q_test  <- fetch_undp_table(x4code = "wxub-qc5k", q = "Congo")
View(select_test)
names(select_test)
expect_that(names(select_test), equals(c("name", "X_2012_hdi_value", "abbreviation")))
View(where_test)
where_test$X_2012_hdi_value
where_test$X_2012_hdi_rank
all(where_test$X_2012_hdi_rank < 50)
all(as.numeric(where_test$X_2012_hdi_rank) < 50)
expect_that(all(as.numeric(where_test$X_2012_hdi_rank) < 50), is_true())
View(order_asc)
as.numeric("A")
order_asc$name[1]
order_desc$name[1]
order_desc$name
order(order_desc$name)
sort(order_desc$name)
sort(order_asc$name)
order_asc == sort(order_asc$name)
order_asc$name == sort(order_asc$name)
all(order_asc$name == sort(order_asc$name))
all(order_desc$name == sort(order_desc$name))
any(order_desc$name == sort(order_desc$name))
order_desc$name == sort(order_desc$name)
order_desc$name == sort(order_desc$name,decreasing=TRUE)
all(order_desc$name == sort(order_desc$name,decreasing=TRUE))
all(order_asc$name == sort(order_asc$name))
expect_that(all(order_asc$name == sort(order_asc$name)), is_true())
q_test
q_test$abbreviation
expect_that(q_test$abbreviation, c("COG", "COD"))
expect_that(q_test$abbreviation, equals(c("COG", "COD")))
expect_that(q_test$abbreviation, equals(c("COG", "COD")))
test_dir("tests/testthat/")
check()
check()
check()
/test_check
?test_check
a = fetch_undp_table(x4code = "wxub-qc5k")
View(a)
df <- fetch_undp_table(table = "1: Human",
select = c("name", "abbreviation", "_2012_hdi_value"))
View(df)
df <- fetch_undp_table(table = "1: Human",
select = c("name", "abbreviation", "_2012_hdi_value"),
where = "_2012_hdi_rank<50")
df <- fetch_undp_table(table = "1: Human",
select = c("name", "abbreviation", "_2012_hdi_value"),
where = "_2012_hdi_rank<11")
View(df)
df
df <- fetch_undp_table(table = "6")
View(df)
df <- fetch_undp_table(table = "7")
View(df)
df1 <- fetch_undp_table(table = "6",
select = c("name", "_2000_health_of_gdp" "_2010_health_of_gdp"))
df1 <- fetch_undp_table(table = "6",
select = c("name", "_2000_health_of_gdp", "_2010_health_of_gdp"))
df2 <- fetch_undp_table(table = "7: Health")
df1 <- fetch_undp_table(table = "6: Command Over Resources",
select = c("name", "_2000_health_of_gdp", "_2010_health_of_gdp"))
combined <- merge(df1, df2)
View(combined)
names(combined)
pairs(2, 4, 7, 20)
pairs(combined[2, 4, 7, 20])
pairs(combined[c(2, 4, 7, 20)])
str9combined
str(combined)
pairs(as.numeric(combined[c(2, 4, 7, 20)]))
comps <- combined[c(2, 4, 7, 20)]
View(comps)
as.numeric(comps)
as.numeric(comps[[1]])
data.matrix(comps)
comps <- data.matrix(combined[c(2, 4, 7, 20)])
str(comps)
pairs(comps)
combined <- merge(df1, df2)
comps <- data.matrix(combined[c(3, 4, 7, 20)])
pairs(comps)
View(df2)
plot(df2$X_2012_hdi_rank, df2$X_2010_infant_mortality_rate)
plot(df2$X_2012_hdi_rank, df2$X_2008_due_to_cardiovascular_diseases_and_diabetes)
plot(combined$X_2012_hdi_rank, combined$X_2010_health_of_gdp)
plot(combined$X_2010_health_of_gdp, combined$X_2012_hdi_rank)
comps <- data.matrix(combined[c("combined$X_2012_hdi_rank", "ombined$X_2010_health_of_gdp",
"X_2010_infant_mortality_rate")])
pairs(comps)
comps <- data.matrix(combined[,c("X_2012_hdi_rank", "X_2010_health_of_gdp",
"X_2010_infant_mortality_rate")])
pairs(comps)
combined$comps <- data.matrix(combined[,c("X_2012_hdi_rank", "X_2010_health_of_gdp",
"X_2010_infant_mortality_rate", X_2009_adult_mortality_rate_female)])
pairs(comps)
comps <- data.matrix(combined[,c("X_2012_hdi_rank", "X_2010_health_of_gdp",
"X_2010_infant_mortality_rate", "X_2009_adult_mortality_rate_female")])
pairs(comps)
comps <- data.matrix(combined[,c("X_2010_health_of_gdp", "X_2012_hdi_rank",
"X_2010_infant_mortality_rate", "X_2009_adult_mortality_rate_female")])
pairs(comps)
cov(comps)
cov(comps, na.rm = T)
cov(comps,use = "complete.obs")
cor(comps,use = "complete.obs")
order_asc <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50",
select = c("name", "abbreviation", "_2012_hdi_value"),
order = "name")
order_desc <- fetch_undp_table(x4code = "wxub-qc5k", where = "_2012_hdi_rank<50",
select = c("name", "abbreviation", "_2012_hdi_value"),
order = "-name")
head(order_asc)
head(order_desc)
all_undp_tables(){
lapply(1:12, function(tab){
fetch_undp_table(table = paste0(tab, ":"))
})
}
all_undp_tables <- function(){
lapply(1:12, function(tab){
fetch_undp_table(table = paste0(tab, ":"))
})
}
#a <- all_undp_tables
.api_endpoints("1:")
all_undp_tables <- function(){
lapply(1:12, function(tab){
fetch_undp_table(table = paste0(tab, ":"))
})
}
a <- all_undp_tables
a
a <- all_undp_tables()
fetch_undp_table(table = "1:")
fetch_undp_table(table = "2:")
fetch_undp_table(table = "3:")
fetch_undp_table(table = "4:")
fetch_undp_table(table = "5:")
fetch_undp_table(table = "5:", query_string_only=T)
fetch_undp_table(table = "6:")
fetch_undp_table(table = "7:")
fetch_undp_table(table = "8:")
fetch_undp_table(table = "9:")
fetch_undp_table(table = "10:")
fetch_undp_table(table = "11:")
fetch_undp_table(table = "12:")
url
tab = 6
fetch_undp_table(table = paste0(tab, ":"))
fetch_undp_table(table = paste0(5, ":"))
tab = 5
url <- fetch_undp_table(table = paste0(tab, ":"),
query_string_only = TRUE)
getResponse(url)
GET(url)
response <- GET(url)
response
http_status(response)
response$status_code
response$status_code != 200
response$status_code
response$headers$statusmessage
msg <- paste("Error in httr GET:", response$status_code, response$headers$statusmessage, url)
msg
response$headers
content(response)
details <- content(response)
details$code[1]
msg <- paste(msg, details$code[1], details$message[1])
msg
logMsg(msg)
response$headers$content-type
response$headers$`content-type`
response$content
getResponse <- function(url) {
response <- GET(url)
status <- http_status(response)
if(response$status_code != 200) {
msg <- paste("Error in httr GET:", response$status_code, response$headers$statusmessage, url)
if(length(response$content)) {
#if(response$headers$`content-length` > 0) {
details <- content(response)
msg <- paste(msg, details$code[1], details$message[1])
}
logMsg(msg)
}
stop_for_status(response)
response
}
getResponse(url)
stop_for_status(response)
getResponse <- function(url, throw_error = TRUE) {
response <- GET(url)
status <- http_status(response)
if(response$status_code != 200) {
msg <- paste("Error in httr GET:", response$status_code, response$headers$statusmessage, url)
if(length(response$content)) {
#if(response$headers$`content-length` > 0) {
details <- content(response)
msg <- paste(msg, details$code[1], details$message[1])
}
logMsg(msg)
}
if(throw_error){
stop_for_status(response)
response
}
}
getResponse(url)
getResponse(url, throw_error = FALSE)
tab
tryCatch(fetch_undp_table(table = paste0(tab, ":")),
function(e){url <- fetch_undp_table(table = paste0(tab, ":"),
query_string_only = TRUE)
getResponse(url, throw_error = FALSE)
}
})
tryCatch(fetch_undp_table(table = paste0(tab, ":")),
function(e){url <- fetch_undp_table(table = paste0(tab, ":"),
query_string_only = TRUE)
getResponse(url, throw_error = FALSE)
})
tryCatch(fetch_undp_table(table = paste0(tab, ":")),
error = function(e){url <- fetch_undp_table(table = paste0(tab, ":"),
query_string_only = TRUE)
getResponse(url, throw_error = FALSE)
})
all_undp_tables <- function(){
lapply(1:12, function(tab){
tryCatch(fetch_undp_table(table = paste0(tab, ":")),
error = function(e){url <- fetch_undp_table(table = paste0(tab, ":"),
query_string_only = TRUE)
getResponse(url, throw_error = FALSE)
})
})
}
a <- all_undp_tables()
a[5]
capture.output(getResponse(url))
url
getResponse(url)
getResponse(url, throw_error = FALSE )
aa = capture.output(getResponse(url, throw_error = FALSE))
aa
tryCatch(fetch_undp_table(table = paste0(tab, ":")),
error = function(e){url <- fetch_undp_table(table = paste0(tab, ":"),
query_string_only = TRUE)
capture.output(getResponse(url, throw_error = FALSE))
})
all_undp_tables <- function(){
lapply(1:12, function(tab){
tryCatch(fetch_undp_table(table = paste0(tab, ":")),
error = function(e){url <- fetch_undp_table(table = paste0(tab, ":"),
query_string_only = TRUE)
capture.output(getResponse(url, throw_error = FALSE))
})
})
}
a <- all_undp_tables()
a[[5]]
check()
